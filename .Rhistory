dotchart(
main = "健康寿命(2016年, 男性)",
jc.dotplot(d_m$HLE_2016),
cex = 0.7,
lcolor = "gray90",
pch = 19,
col = colfunc(47),
pt.cex = 1.5
)
abline(v = 79, lty = 2)
d_f %>% select(LE_2015) %>% bind_cols(Wakayama::pref["pref.J"]) %>% dplyr::arrange(LE_2015) %>% mutate(rank=row_number()) %>%DT::datatable()
jc.dotplot <- function(x) {
# x is HLE or LE in c()　vector
names(x)<-Wakayama::pref$pref.J
x<-x[order(x)]
}
colfunc <- colorRampPalette(c("gray90","black"))
par(family= "HiraKakuProN-W3")
dotchart(
main = "平均寿命(2015年, 女性)",
jc.dotplot(d_f$LE_2015),
cex = 0.7,
lcolor = "gray90",
pch = 19,
col = colfunc(47),
pt.cex = 1.5
)
abline(v = 79, lty = 2)
d_f %>% select(HLE_2016) %>% bind_cols(Wakayama::pref["pref.J"]) %>% dplyr::arrange(HLE_2016) %>% mutate(rank=row_number()) %>%DT::datatable()
jc.dotplot <- function(x) {
# x is HLE or LE in c()　vector
names(x)<-Wakayama::pref$pref.J
x<-x[order(x)]
}
colfunc <- colorRampPalette(c("gray90","black"))
par(family= "HiraKakuProN-W3")
dotchart(
main = "平均寿命(2015年, 女性)",
jc.dotplot(d_f$HLE_2016),
cex = 0.7,
lcolor = "gray90",
pch = 19,
col = colfunc(47),
pt.cex = 1.5
)
abline(v = 79, lty = 2)
d_common %>% dplyr::select_if(is.numeric) %>% sapply(rank) %>%
tbl_df() %>%dplyr::filter(key==30) %>% t() %>% as.data.frame() %>% DT::datatable()
# purrr::map(iris[,-5], ~hist(.x))
suppressMessages(library(plotly))
d_common_standarize<-
d_common %>% dplyr::select_if(is.numeric) %>%
select(-key, -pref.id) %>% scale() %>% tbl_df()
d_common_standarize<-bind_cols(d_common["pref.id"], d_common_standarize)
d_common_standarize_long<-
d_common_standarize %>% dplyr::select_if(is.numeric) %>%
pivot_longer(
cols = -pref.id,
names_to ="var_name" ,
values_to ="value"
)
plot_ly(
x =d_common_standarize_long$value,
type = "histogram",
name = "Histogram",
frame =  ~d_common_standarize_long$var_name
)
jc_shapiro <- function(x) {
shapiro.test(x) %>% broom::tidy() %>% select(p.value) %>% round(3)
}
d_common_normality_test<-d_common %>% dplyr::select_if(is.numeric) %>%
select(-key, -pref.id) %>%
# scale() %>%
tbl_df() %>% purrr::map_df(jc_shapiro)
rownames(d_common_normality_test)<-d_common %>% dplyr::select_if(is.numeric) %>%
select(-key, -pref.id) %>% colnames()
DT::datatable(d_common_normality_test)
d_common_normality_test %>% filter(p.value<0.05)
d_common_normality_test
d_common_normality_test
d_common_normality_test %>% filter(p.value<0.05) %>% DT::datatable()
d_common %>% dplyr::select_if(is.numeric) %>% sapply(rank) %>%
tbl_df() %>%dplyr::filter(key==30) %>% t() %>% as.data.frame()
d_common %>% dplyr::select_if(is.numeric) %>% sapply(rank) %>%
tbl_df() %>%dplyr::filter(key==30) %>% t() %>% as.data.frame() %>% barplot()
d_common %>% dplyr::select_if(is.numeric) %>% sapply(rank) %>%
tbl_df() %>%dplyr::filter(key==30) %>% t() %>% as.data.frame() %>%plot()
d_common %>% dplyr::select_if(is.numeric) %>% sapply(rank) %>%
tbl_df() %>%dplyr::filter(key==30) %>% t() %>% as.data.frame() %>%plot()
d_common %>% dplyr::select_if(is.numeric) %>% sapply(rank) %>%
tbl_df() %>%dplyr::filter(key==30) %>% t() %>% as.data.frame() %>%tbl_df()
d_common %>% dplyr::select_if(is.numeric) %>% sapply(rank) %>%
tbl_df() %>%dplyr::filter(key==30) %>% t() %>% as.data.frame() %>%
barplot()
iris$Sepal.Length %>% plot()
iris$Sepal.Length %>% plot()
d_common %>% dplyr::select_if(is.numeric) %>% sapply(rank) %>%
tbl_df() %>%dplyr::filter(key==30) %>% t() %>% as.data.frame() %>%
plot()
iris %>% plot()
d_common %>% dplyr::select_if(is.numeric) %>% sapply(rank) %>%
tbl_df() %>%dplyr::filter(key==30) %>% t() %>% as.data.frame() %>%.[1] %>%
plot()
d_common %>% dplyr::select_if(is.numeric) %>% sapply(rank) %>%
tbl_df() %>%dplyr::filter(key==30) %>% t() %>% as.data.frame() %>%.$V1 %>%
plot()
install.packages("readxl")
install.packages("tidyverse")
install.packages("data.table")
install.packages("kableExtra")
install.packages("DT")
library(Wakayama)
install.packages("plotly")
install.packages("gapminder")
system("open .")
sys
system("open .")
system("open .")
system("open .")
# 使用package
suppressMessages(library(readxl))
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(kableExtra))
suppressMessages(library(curl))
suppressMessages(library(tidyverse))
iris %>% select(-5)
iris %>% select(-5) %>% pivot_longer(everything())
iris %>% select(-5) %>% pivot_longer(everything()) %>% tbl_df()
iris %>% select(-5) %>% pivot_longer(everything()) %>% tbl_df()
iris %>% select(-5) %>% pivot_longer(everything()) %>% tbl_df() %>%
group_by(name)
iris %>% select(-5) %>% pivot_longer(everything()) %>% tbl_df() %>%
group_by(name) %>% nest()
iris %>% select(-5) %>% pivot_longer(everything()) %>% tbl_df() %>%
group_by(name) %>% nest() %>% mutate(map(data, summary()))
iris %>% select(-5) %>% pivot_longer(everything()) %>% tbl_df() %>%
group_by(name) %>% nest() %>% mutate(map(data, mean))
iris %>% select(-5) %>% pivot_longer(everything()) %>% tbl_df() %>%
group_by(name) %>% nest() %>% mutate(map(data, ~mean()))
iris %>% select(-5) %>% pivot_longer(everything()) %>% tbl_df() %>%
group_by(name) %>% nest() %>% mutate(map(data, ~mean(.x)))
aa
aa<-iris %>% select(-5) %>% pivot_longer(everything()) %>% tbl_df() %>%
group_by(name) %>% nest() %>% mutate(map(data, ~mean(.x)))
aa$`map(data, ~mean(.x))`
aa<-iris %>% select(-5) %>% pivot_longer(everything()) %>% tbl_df() %>%
group_by(name) %>% nest() %>% mutate(map(data,mean))
aa$`map(data, mean)`
aa<-iris %>% select(-5) %>% pivot_longer(everything()) %>% tbl_df() %>%
group_by(name) %>% nest()
aa
aa$data
sapply(aa$data, mean)
mean(iris)
iris[1]
mean(iris[1])
# 使用package
suppressMessages(library(readxl))
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(kableExtra))
suppressMessages(library(curl))
suppressMessages(library(tidyverse))
iris %>% [-5]
iris[-5]
iris[-5] %>% table(.[1])
iris[-5] %>% table()
iris[-5] %>% pivot_longer()
iris[-5] %>% pivot_longer(cols = everything())
iris[-5] %>% pivot_longer(cols = everything()) %>%
ggplot(aes(x = name, y = value))+geom_point()
iris[-5] %>% pivot_longer(cols = everything()) %>%
ggplot(aes(x = 1, y = value))+geom_point()
iris[-5] %>% pivot_longer(cols = everything()) %>%
ggplot(aes(x = 1, y = value, group=name))+geom_point()
iris[-5] %>% pivot_longer(cols = everything()) %>%
ggplot(aes(x = 1, y = value, group=name, color=name))+geom_point()
iris[-5] %>% pivot_longer(cols = everything()) %>%
ggplot(aes(x = name, y = value, group=name, color=name))+geom_point()
iris[-5] %>% pivot_longer(cols = everything()) %>%
ggplot(aes(x = name, y = value, group=name, color=name))+
geom_bar()
iris[-5] %>% pivot_longer(cols = everything()) %>%
ggplot(aes(x = name, y = value, group=name, color=name))+geom_point()
iris[-5] %>% pivot_longer(cols = everything())
t<-iris[-5] %>% pivot_longer(cols = everything())
t
library(plotly)
plot_ly(data = t)
plot_ly(data = t, .x=name, .y=value)
?plot_ly
plot_ly(economics, x = ~pop)
economics
economics
plot_ly(economics, x = ~date, y = ~pop)
plot_ly(z = ~volcano)
volcano
plot_ly(data = t, x=~name, y=~value)
plot_ly(data = t, y=~name, x=~value)
plot_ly(data = t,  x=~value)
plot_ly(data = t,  x=~value, frame = ~name)
# Attributes are documented in the figure reference -> https://plot.ly/r/reference
# You might notice plot_ly() has named arguments that aren't in this figure
# reference. These arguments make it easier to map abstract data values to
# visual attributes.
p <- plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
p
add_markers(p, color = ~Petal.Length, size = ~Petal.Length)
add_markers(p, color = ~Species)
p
add_markers(p, color = ~Species)
add_markers(p, color = ~Species, colors = "Set1")
add_markers(p, symbol = ~Species)
add_paths(p, linetype = ~Species)
add_markers(p, color = ~Petal.Length, size = ~Petal.Length)
add_markers(p, color = ~Species)
add_markers(p, color = ~Species, colors = "Set1")
plot_ly(economics, x = ~date, color = I("black"))
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~uempmed) %>%
add_lines(y = ~psavert, color = I("red"))
plot_ly(economics, x = ~date, color = I("black"))
%>%   add_lines(y = ~psavert, color = I("red"))
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~psavert, color = I("red"))
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~uempmed)
plot_ly(economics, x = ~date, color = I("black")) %>%
add_lines(y = ~uempmed) %>%
add_lines(y = ~psavert, color = I("red"))
plot_ly(economics, x = ~date, color = I("black"))
economics$date
economics$date %>% table()
colnames(iris)
colnames(iris) %>% cat()
plot_ly(data = iris, x="Sepal.Length",
"Sepal.Width"
)
plot_ly(data = iris, x="Sepal.Length",
"Sepal.Width"
)
plot_ly(data = iris, x="Sepal.Length",
"Sepal.Width"
)
plot_ly(data = iris, x=~Sepal.Length)
plot_ly(data = iris, x=~Sepal.Length,
y=~Sepal.Width)
plot_ly(data = iris, x=~Sepal.Length,
y=~Sepal.Width)+add_lines()
plot_ly(data = iris, x=~Sepal.Length,
y=~Sepal.Width) %>%
add_lines()
plot_ly(data = iris, x=~Sepal.Length,
y=~Sepal.Width, frame = ~Sepal.Length) %>%
add_lines()
plot_ly(data = iris, x=~Sepal.Length,
y=~Sepal.Width, frame = ~Sepal.Length) %>%
add_paths()
mpg %>%
group_by(model) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
mutate(model = forcats::fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = I("gray"), showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = I("blue"),
name = "mpg city"
) %>%
add_markers(
x = ~h, y = ~model,
color = I("red"),
name  = "mpg highway"
) %>%
layout(xaxis = list(title = "Miles per gallon"))
aa<-mpg %>%
group_by(model) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
mutate(model = forcats::fct_reorder(model, c))
aa
plot_ly(data = aa, x=~c, y=~h)
plot_ly(data = aa, x=~c, y=~h, color = ~model)
plot_ly(data = aa,  y=~h, color = ~model)
plot_ly(data = aa,  y=~h)
aa
%>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = I("gray"), showlegend = FALSE
)
aa%>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = I("gray"), showlegend = FALSE
)
aa
aa%>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model
)
aa%>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h
# , yend = ~model
)
aa%>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h
, yend = ~model
)
ls()
# devtools::install_github(repo = "luka3117/JcPackage/OsakaUniv2020")
# 使用package
suppressMessages(library(readxl))
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(kableExtra))
suppressMessages(library(curl))
suppressMessages(library(tidyverse))
getwd()
d<-read_csv("../..//data/DataFormat.csv", skip=1, locale = readr::locale(encoding = "CP932"))
d<-d[-95,]
d %>% dim()
d<-d %>% rename(key=X1)
d %>% DT::datatable()
var<-read.csv("../..//var_name_Eng.csv")
colnames(d)<-var$var_name_Eng
# d %>% DT::datatable()
read.csv("../../JpnEng.csv") %>% DT::datatable()
d_common<-d[, sapply(d[48,], is.na)]
d_common<-d_common[1:47, ]
# d_common%>% DT::datatable()
d_common<-d %>% select(1:6) %>% .[1:47,] %>% bind_cols(d_common)
d_common %>% DT::datatable()
d_common %>% dim()
d_common %>% colnames() %>%tbl_df() %>%  DT::datatable()
# devtools::install_github(repo = "luka3117/JcPackage/OsakaUniv2020")
# 使用package
suppressMessages(library(readxl))
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(kableExtra))
suppressMessages(library(curl))
suppressMessages(library(tidyverse))
getwd()
d<-read_csv("../..//data/DataFormat.csv", skip=1, locale = readr::locale(encoding = "CP932"))
d<-d[-95,]
d %>% dim()
d<-d %>% rename(key=X1)
d %>% DT::datatable()
var<-read.csv("../..//var_name_Eng.csv")
colnames(d)<-var$var_name_Eng
# d %>% DT::datatable()
read.csv("../../JpnEng.csv") %>% DT::datatable()
d_common<-d[, sapply(d[48,], is.na)]
d_common<-d_common[1:47, ]
# d_common%>% DT::datatable()
d_common<-d %>% select(1:6) %>% .[1:47,] %>% bind_cols(d_common)
d_common %>% DT::datatable()
d_common %>% dim()
d_common %>% colnames() %>%tbl_df() %>%  DT::datatable()
name <- function(x) {
!is.na(x)
}
d_mf<-d[, sapply(d[48,], name)]
d_mf %>% DT::datatable()
d_mf %>% dim()
d_m<-d_mf %>% filter(sex=="M")
d_f<-d_mf %>% filter(sex=="F")
d_m %>% DT::datatable()
d_m
d_m$LE_2015
d_m$HLE_2016
plot_ly(data = d_m, x=~LE_2015, y=~HLE_2016)
d_m$pref.J
plot_ly(data = d_m, x=~LE_2015, y=~pref.J)
d_m %>% select(pref.J, LE_2015,HLE_2016 )
d_m %>% select(pref.J, LE_2015,HLE_2016 )
aa<-d_m %>% select(pref.J, LE_2015,HLE_2016 )
aa %>% plot_ly()
aa %>% plot_ly() %>% add_segments()
aa %>% plot_ly() %>% add_segments(x = ~LE_2015, y=~pref.J, xend = ~HLE_2016,
yend = ~pref.J
)
aa
aa %>%arrange(aa$LE_2015)
aa %>%arrange(-aa$LE_2015)
aa %>%arrange(-aa$LE_2015) %>%
plot_ly() %>% add_segments(x = ~LE_2015, y=~pref.J, xend = ~HLE_2016,
yend = ~pref.J
)
aa %>%arrange(-aa$LE_2015) %>%
plot_ly() %>% add_segments(x = ~HLE_2016, y=~pref.J, xend = ~LE_2015,
yend = ~pref.J
)
aa %>%   plot_ly() %>% add_segments(x = ~HLE_2016, y=~pref.J, xend = ~LE_2015,
yend = ~pref.J
)
aa<-d_m %>% select(pref.J, pref.E, LE_2015,HLE_2016 )
aa %>%   plot_ly() %>% add_segments(x = ~HLE_2016, y=~pref.E, xend = ~LE_2015,
yend = ~pref.E
)
aa %>% plot_ly() %>% add_segments(x = ~HLE_2016, y=~pref.E, xend = ~LE_2015,
yend = ~pref.E
)
mtcars
norm(1000)
rnorm(n = 100)
rnorm(10, 0)
mtcars$hp
iris$Species
# 使用package
suppressMessages(library(readxl))
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(kableExtra))
suppressMessages(library(curl))
suppressMessages(library(tidyverse))
Species %>% nest()
iris %>% nest(Species)
iris %>% nest(Species)
iris %>% select(1:4)
iris %>% tidyr::nest(1:4)
iris %>% tidyr::nest(1:2)
iris %>% tidyr::nest(5)
iris %>% tidyr::nest(1:4)
iris %>% tidyr::nest(-Species)
iris %>% tidyr::nest(-Species)
iris %>% tidyr::nest(-Species)
iris %>% tidyr::nest(-Species)
iris %>% tidyr::nest(-Species)
iris %>% tidyr::nest(-Species)
iris %>% tidyr::nest(-Species)
iris %>% tidyr::nest(-Species)
iris %>% tidyr::nest(-Species)
iris %>% select(1:4) %>%
tt<-iris %>% tidyr::nest(-Species)
tt<-iris %>% tidyr::nest(-Species)
tt
tt$data
tt$data %>% names()
tt$data %>% dimnames()
tt$data %>% names()
tt$data %>% names()<-letters(1:3)
letters(1:3)
letter(1:3)
letters
letter[1:3]
tt$data %>% names()<-letters[1:3]
tt
tt$data
tt$data %>% dimnames()<-letters[1:3]
aa<-tt$data %>% dimnames()<-letters[1:3]
aa
aa<-tt$data %>% names()<-letters[1:3]
aa
aa<-tt$data %>% names()<-letters[1:3]
tt$data <-letters[1:3]
tt
tt$data
iris %>% select(1:4) %>%
tt<-iris %>% tidyr::nest(-Species)
names(tt$data)<-letters[1:3]
tt
tt<-iris %>% tidyr::nest(-Species)
tt
names(tt$data)<-letters[1:3]
tt
tt$data
system("open .")
system("open .")
devtools::load_all(".")
# data import
library(readxl)
d<-read_excel("./data1.xlsx",1); d<-d[-95,] #男女データ
f<-d[d$sex==0,];m<-d[d$sex==1,] # 男女別分けデータ
d
LE<-d[, c("LE.75","LE.85","LE.90","LE.95","LE.00","LE.05","LE.10","LE.15")]
matplot(t(LE) ,  xlab="", ylab="", type="n", axes=F, xlim=c(0.5, 8.5))
matpoints(t(LE) ,  xlab="", ylab="", type="l",
col=rgb(26/255,26/255,26/255, alpha=0.05),
lty=rep(1,47),
lwd=3)
axis(side=1,
labels=c("1975年", "1985年", "1990年", "1995年", "2000年", "2005年", "2010年", "2015年"),
at=1:8,
las=3,
cex.axis = 1.5)
axis(side=2,
labels=c("70歳", "75歳", "80歳", "85歳", "90歳"),
at=seq(70,90,5),
cex.axis=1.5)
text(2, 85, "女性", cex=2)
text(4, 80, "男性", cex=2)
ls()
LE
system("open .")
